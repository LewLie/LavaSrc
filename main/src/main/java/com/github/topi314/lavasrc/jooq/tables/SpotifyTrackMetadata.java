/*
 * This file is generated by jOOQ.
 */
package com.github.topi314.lavasrc.jooq.tables;


import com.github.topi314.lavasrc.jooq.Indexes;
import com.github.topi314.lavasrc.jooq.Keys;
import com.github.topi314.lavasrc.jooq.Lavasrc;
import com.github.topi314.lavasrc.jooq.tables.records.SpotifyTrackMetadataRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SpotifyTrackMetadata extends TableImpl<SpotifyTrackMetadataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>lavasrc.spotify_track_metadata</code>
     */
    public static final SpotifyTrackMetadata SPOTIFY_TRACK_METADATA = new SpotifyTrackMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpotifyTrackMetadataRecord> getRecordType() {
        return SpotifyTrackMetadataRecord.class;
    }

    /**
     * The column
     * <code>lavasrc.spotify_track_metadata.id_spotify_track_metadata</code>.
     */
    public final TableField<SpotifyTrackMetadataRecord, Long> ID_SPOTIFY_TRACK_METADATA = createField(DSL.name("id_spotify_track_metadata"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>lavasrc.spotify_track_metadata.album_id</code>.
     */
    public final TableField<SpotifyTrackMetadataRecord, String> ALBUM_ID = createField(DSL.name("album_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>lavasrc.spotify_track_metadata.artist1_id</code>.
     */
    public final TableField<SpotifyTrackMetadataRecord, String> ARTIST1_ID = createField(DSL.name("artist1_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>lavasrc.spotify_track_metadata.artist2_id</code>.
     */
    public final TableField<SpotifyTrackMetadataRecord, String> ARTIST2_ID = createField(DSL.name("artist2_id"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>lavasrc.spotify_track_metadata.artist3_id</code>.
     */
    public final TableField<SpotifyTrackMetadataRecord, String> ARTIST3_ID = createField(DSL.name("artist3_id"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>lavasrc.spotify_track_metadata.artist4_id</code>.
     */
    public final TableField<SpotifyTrackMetadataRecord, String> ARTIST4_ID = createField(DSL.name("artist4_id"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>lavasrc.spotify_track_metadata.track_id</code>.
     */
    public final TableField<SpotifyTrackMetadataRecord, String> TRACK_ID = createField(DSL.name("track_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>lavasrc.spotify_track_metadata.track_explicit</code>.
     */
    public final TableField<SpotifyTrackMetadataRecord, Byte> TRACK_EXPLICIT = createField(DSL.name("track_explicit"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>lavasrc.spotify_track_metadata.track_popularity</code>.
     */
    public final TableField<SpotifyTrackMetadataRecord, Integer> TRACK_POPULARITY = createField(DSL.name("track_popularity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>lavasrc.spotify_track_metadata.metadata</code>.
     */
    public final TableField<SpotifyTrackMetadataRecord, String> METADATA = createField(DSL.name("metadata"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>lavasrc.spotify_track_metadata.time_created</code>.
     */
    public final TableField<SpotifyTrackMetadataRecord, Long> TIME_CREATED = createField(DSL.name("time_created"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>lavasrc.spotify_track_metadata.time_updated</code>.
     */
    public final TableField<SpotifyTrackMetadataRecord, Long> TIME_UPDATED = createField(DSL.name("time_updated"), SQLDataType.BIGINT.nullable(false), this, "");

    private SpotifyTrackMetadata(Name alias, Table<SpotifyTrackMetadataRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SpotifyTrackMetadata(Name alias, Table<SpotifyTrackMetadataRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>lavasrc.spotify_track_metadata</code> table
     * reference
     */
    public SpotifyTrackMetadata(String alias) {
        this(DSL.name(alias), SPOTIFY_TRACK_METADATA);
    }

    /**
     * Create an aliased <code>lavasrc.spotify_track_metadata</code> table
     * reference
     */
    public SpotifyTrackMetadata(Name alias) {
        this(alias, SPOTIFY_TRACK_METADATA);
    }

    /**
     * Create a <code>lavasrc.spotify_track_metadata</code> table reference
     */
    public SpotifyTrackMetadata() {
        this(DSL.name("spotify_track_metadata"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Lavasrc.LAVASRC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SPOTIFY_TRACK_METADATA_SPOTIFY_TRACK_METADATA_ALBUM_ID_IDX, Indexes.SPOTIFY_TRACK_METADATA_SPOTIFY_TRACK_METADATA_ARTIST1_ID_IDX, Indexes.SPOTIFY_TRACK_METADATA_SPOTIFY_TRACK_METADATA_ARTIST2_ID_IDX, Indexes.SPOTIFY_TRACK_METADATA_SPOTIFY_TRACK_METADATA_ARTIST3_ID_IDX, Indexes.SPOTIFY_TRACK_METADATA_SPOTIFY_TRACK_METADATA_ARTIST4_ID_IDX);
    }

    @Override
    public Identity<SpotifyTrackMetadataRecord, Long> getIdentity() {
        return (Identity<SpotifyTrackMetadataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SpotifyTrackMetadataRecord> getPrimaryKey() {
        return Keys.KEY_SPOTIFY_TRACK_METADATA_PRIMARY;
    }

    @Override
    public List<UniqueKey<SpotifyTrackMetadataRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SPOTIFY_TRACK_METADATA_SPOTIFY_TRACK_METADATA_TRACK_ID_IDX);
    }

    @Override
    public SpotifyTrackMetadata as(String alias) {
        return new SpotifyTrackMetadata(DSL.name(alias), this);
    }

    @Override
    public SpotifyTrackMetadata as(Name alias) {
        return new SpotifyTrackMetadata(alias, this);
    }

    @Override
    public SpotifyTrackMetadata as(Table<?> alias) {
        return new SpotifyTrackMetadata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SpotifyTrackMetadata rename(String name) {
        return new SpotifyTrackMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpotifyTrackMetadata rename(Name name) {
        return new SpotifyTrackMetadata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpotifyTrackMetadata rename(Table<?> name) {
        return new SpotifyTrackMetadata(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotifyTrackMetadata where(Condition condition) {
        return new SpotifyTrackMetadata(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotifyTrackMetadata where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotifyTrackMetadata where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotifyTrackMetadata where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpotifyTrackMetadata where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpotifyTrackMetadata where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpotifyTrackMetadata where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpotifyTrackMetadata where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotifyTrackMetadata whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotifyTrackMetadata whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
